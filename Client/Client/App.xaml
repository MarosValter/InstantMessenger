<Application x:Class="InstantMessenger.Client.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:base="clr-namespace:InstantMessenger.Client.Base;assembly=InstantMessenger.Client.Base"
             xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
             Startup="Application_Startup">
    <Application.Resources>
        <base:ScrollbarOnFarRightConverter x:Key="ScrollbarOnFarRightConverter"/>
        <base:ScrollbarOnFarLeftConverter x:Key="ScrollbarOnFarLeftConverter"/>
        <!-- 
         This color will be used to draw a border around the TabControl, on 
         the bottom of the TabPanel and on the bottom of unselected TabItems.
         -->
        <Color x:Key="BorderColor_Base">#888</Color>
        <!-- 
         This color will be used to draw the (outer) background of TabPages and
         the selected TabItem.
      -->
        <Color x:Key="TabControl_BackgroundColor_Base">White</Color>

        <!-- Brushes used for styling the TabControl -->
        <SolidColorBrush x:Key="TabControl_BackgroundBrush_Base" 
                         Color="{StaticResource TabControl_BackgroundColor_Base}"/>

        <LinearGradientBrush x:Key="TabItemPanel_BackgroundBrush"
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.98" Color="Transparent"/>
                <GradientStop Offset="0.99" Color="{StaticResource BorderColor_Base}"/>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <!-- 
         We only want to render a line between the TabControl's TabPage-area and
         the TabItemsPanel where there is no TabItem/TabStrip. However, we cannot
         simply set the TabPanel's Background-property as this would affect
         the area as a whole.
         The trick here is to define a gradient that only renders a 1px line at
         the bottom. Since TabItems are rendered above the background, this line
         will only be visible in the area that doesn't contain a TabItem.
         We'll achieve this effect by using a gradient that finishes with the
         border-color, but only for the last .01%.
        -->
        <LinearGradientBrush x:Key="TabPanel_BackgroundBrush" 
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.98" Color="Transparent"/>
                <GradientStop Offset="0.99" Color="{StaticResource BorderColor_Base}"/>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <!-- Brushes used for styling TabItems (Background) -->
        <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Disabled" 
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#EEE" Offset="0"/>
                <GradientStop Color="#BBB" Offset="0.98"/>
                <!-- 
                This is the same trick as with the TabPanel_BackgroundBrush (see there).
                -->
                <GradientStop Color="{StaticResource BorderColor_Base}" Offset="0.99"/>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        
        <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Selected" 
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF969696" Offset="0.15" />
                <!--<GradientStop Color="{StaticResource TabControl_BackgroundColor_Base}" 
                          Offset="0.15"/>
                <GradientStop Color="#C5DBF6" Offset="0.8"/>-->
                <GradientStop Color="White" Offset="0.15"/>
                <!--<GradientStop Color="{StaticResource TabControl_BackgroundColor_Base}" 
                          Offset="1.0"/>-->
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        
        <LinearGradientBrush x:Key="TabItem_BackgroundBrush_Unselected" 
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <!--<GradientStop Color="#E8F2FF" Offset="0.0"/>
                <GradientStop Color="#DFE9F6" Offset="0.3"/>
                <GradientStop Color="#C7D8EE" Offset="0.7"/>
                <GradientStop Color="#B9CADE" Offset="0.98"/>-->
                <GradientStop Color="White" Offset="0.98"/>
                <!-- See the TabPanel_BackgroundBrush comment. -->
                <GradientStop Color="{StaticResource BorderColor_Base}" 
                              Offset="0.99"/>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>
        
        <!--<LinearGradientBrush x:Key="TabItem_HoverBackgroundBrush" 
                             EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="#FFFFD5A0" Offset="0.3" />
            <GradientStop Color="#FFFFA335" Offset="0.51" />
            <GradientStop Color="#FFFFC14A" Offset="0.98" />
        </LinearGradientBrush>-->
        <!--<LinearGradientBrush x:Key="TabItem_HoverBackgroundBrush" 
                             EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="White" Offset="0.98" />
            <GradientStop Color="{StaticResource BorderColor_Base}" 
                              Offset="0.99"/>
        </LinearGradientBrush>-->
        <SolidColorBrush x:Key="TabItem_HoverBackgroundBrush"
                         Color="White" />
        

        <!-- Brushes used for styling TabItems (Borders) -->
        <!-- 
         For all borders around the TabItems, we'll have to use either the 
         identical color OR (what's being done here) we'll have to assure the
         bottom of the border will always result in the color that is being
         used for drawing the line between the TabControl and the TabPanel.
      
         If we do use a different (solid) color here, the bottom line will not
         be rendered as desired which I presume is a matter of precedence in the
         way borders are being drawn (anti-clockwise, starting with bottom and
         finishing with left, hence the effect of the left and right edges of 
         the bottom line being drawn with the left and right border respectively).
         If you want to try it out, exchange the LinearGradientBrush with the
         SolidColorBrush that has been commented out and run the app.
         You'll probably have to zoom in to see the effect. 
      -->
        <!--<SolidColorBrush x:Key="TabItem_DisabledBorderBrush" Color="#CCC" />-->
        <LinearGradientBrush x:Key="TabItem_DisabledBorderBrush" 
                             StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#CCC" Offset="0"/>
            <GradientStop Color="{StaticResource BorderColor_Base}" Offset="0.8"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="TabItem_BorderBrush_Selected"
                         Color="{StaticResource BorderColor_Base}" />
        <!-- See the comment regarding the TabItem_DisabledBorderBrush above. -->
        <LinearGradientBrush x:Key="TabItem_Border_Unselected" 
                             StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#AAA" Offset="0"/>
            <GradientStop Color="{StaticResource BorderColor_Base}" Offset="0.8"/>
        </LinearGradientBrush>
        <!--<LinearGradientBrush x:Key="TabItem_HoverBorderBrush"
                             StartPoint="0,0" EndPoint="0,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Offset="0.98" Color="DarkOrange"/>
                --><!-- See the TabPanel_BackgroundBrush comment. --><!--
                <GradientStop Offset="0.99"
                              Color="{StaticResource BorderColor_Base}"/>
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>-->
        <SolidColorBrush x:Key="TabItem_HoverBorderBrush"
                         Color="{StaticResource BorderColor_Base}" />

        <Thickness x:Key="TabItemMargin_Base">0,8,-4,0</Thickness>
        <Thickness x:Key="TabItemMargin_Selected">-4,0,-4,0</Thickness>
        <Thickness x:Key="TabItemMargin_Hover">0,2,0,0</Thickness>
        <Thickness x:Key="TabItemPanel_Padding">4,0,0,0</Thickness>

        <Thickness x:Key="TabPanel_Padding">4,0,4,0</Thickness>
        <Thickness x:Key="TabPanelScrollPanel_Margin">5,0,0,2</Thickness>
        
        <Thickness x:Key="ButtonMargin_Base">-5,5,7,4</Thickness>
        <Thickness x:Key="ButtonMargin_Selected">-5,8,7,4</Thickness>
        <Thickness x:Key="ButtonMargin_Hover">-5,6,7,4</Thickness>

        <Thickness x:Key="TabItemContentMargin_base">7,2,12,2</Thickness>
        <Thickness x:Key="TabItemContentMargin_Selected">11,10,12,2</Thickness>
        <Thickness x:Key="TabItemContentMargin_Hover">7,8,16,2</Thickness>

        <!-- Brushes used for styling TabItems (Foreground/Text) -->
        <SolidColorBrush x:Key="TabItem_TextBrush_Unselected" Color="#4971A3" />
        <SolidColorBrush x:Key="TabItem_TextBrush_Disabled" Color="#888" />
        <SolidColorBrush x:Key="TabItem_TextBrush_Hover" Color="Indigo" />
        <SolidColorBrush x:Key="TabItem_TextBrush_Selected" Color="DarkBlue" />

        <!-- The colors that will be used when assembling the brushes for the LineButtons-->
        <Color x:Key="LineButtonBackgroundColor_Bright">LightGoldenrodYellow</Color>
        <Color x:Key="LineButtonBackgroundColor_Dark">#FAEEB1</Color>
        <Color x:Key="LineButtonBackgroundColorDisabled_Bright">#EEE</Color>
        <Color x:Key="LineButtonBackgroundColorDisabled_Dark">#999</Color>

        <!-- Color of the border around the scrollbar-thumb -->
        <SolidColorBrush x:Key="LineButtonBorderBrush" Color="#FF8693BD"/>

        <!-- The color for the scrollbar's line-buttons when the mouse hovers over them -->
        <LinearGradientBrush x:Key="LineButtonHoverBrush" StartPoint="0.5,0" EndPoint="0.5,1">
            <GradientStop Color="#FFFFD5A0" Offset="0.3"/>
            <GradientStop Color="#FFFFA335" Offset="0.51"/>
            <GradientStop Color="#FFFFC14A" Offset="0.986"/>
        </LinearGradientBrush>

        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonBackgroundBrush">
            <GradientStop Offset="0.3" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
            <GradientStop Offset="0.4" Color="{StaticResource LineButtonBackgroundColor_Dark}"/>
            <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
        </LinearGradientBrush>


        <!-- The color for the scrollbar's line-buttons when they're clicked/pressed -->
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonPressedBrush">
            <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
            <GradientStop Offset="0.6" Color="{StaticResource LineButtonBackgroundColor_Dark}"/>
            <GradientStop Offset="0.7" Color="{StaticResource LineButtonBackgroundColor_Bright}"/>
        </LinearGradientBrush>

        <!-- The color to be used when drawing the arrows on the scrollbar's line-buttons -->
        <SolidColorBrush x:Key="LineButtonBrush" Color="#FF14273D"/>
        <!-- The color to be used for painting the interior of the TabItem-menu's path -->
        <LinearGradientBrush x:Key="TabMenuButtonBrush" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Offset="0" Color="White"/>
            <GradientStop Offset="1" Color="#F3F3E3"/>
        </LinearGradientBrush>

        <!-- The color for the scrollbar's line-buttons when they're disabled -->
        <!--<LinearGradientBrush StartPoint="0,0" EndPoint="0,1" x:Key="LineButtonDisabledBrush">
            <GradientStop Offset="0" Color="{StaticResource LineButtonBackgroundColorDisabled_Bright}"/>
            <GradientStop Offset="1" Color="{StaticResource LineButtonBackgroundColorDisabled_Dark}"/>
        </LinearGradientBrush>-->
        <SolidColorBrush x:Key="LineButtonDisabledBrush" Color="{StaticResource LineButtonBackgroundColorDisabled_Bright}"/>

        <!-- The background color of the TabItems popup-menu -->
        <LinearGradientBrush x:Key="TabItemMenuBackcolor" StartPoint="0,0" EndPoint="1,1">
            <GradientStop Offset="0" Color="White"/>
            <GradientStop Offset="1" Color="#EEE"/>
        </LinearGradientBrush>


        <!--
         The Geometries below will be used to render the ScrollViewer's LineLeft-,
         LineRight- and TabMenu-buttons.
        -->
        <Geometry x:Key="ArrowLeft">M0,5 L10,10 10,0Z</Geometry>
        <Geometry x:Key="ArrowRight">M0,0 L10,5 L0,10Z</Geometry>
        <Geometry x:Key="TabMenuButton">M0,1 H0,5 M7,8 L0,8 0,2 10,2 L10,5 M10,8 L10,10 8,10Z</Geometry>


        <!-- 
         Definitions for the Path-Geometries that are being used to render
         the ScrollViewer's LineButtons.
      -->
        <Path x:Key="ArrowLeftPath"
              Margin="4,3"
              Data="{StaticResource ArrowLeft}"
              Stroke="{StaticResource LineButtonBrush}" 
              Fill="{StaticResource LineButtonBrush}"
              Stretch="Fill"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"/>
        <Path x:Key="ArrowRightPath"
              Margin="4,3"
              Data="{StaticResource ArrowRight}"
              Stroke="{StaticResource LineButtonBrush}" 
              Fill="{StaticResource LineButtonBrush}"
              Stretch="Fill"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"/>
        <Path x:Key="TabMenuButtonPath"
              Margin="2"
              Data="{StaticResource TabMenuButton}"
              Stroke="{StaticResource LineButtonBrush}" 
              Fill="{StaticResource TabMenuButtonBrush}"
              Stretch="Fill"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"/>

        <!-- 
         This determines how wide/high the LineButtons will be rendered.
      -->
        <system:Double x:Key="ButtonWidthAndHeight">20</system:Double>

        <!-- Styles for the LineButtons -->
        <Style x:Key="LineButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}"/>
            <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border x:Name="ButtonBorder" Margin="1"
                                BorderBrush="{StaticResource LineButtonBorderBrush}" 
                                Background="{StaticResource LineButtonBackgroundBrush}" 
                                CornerRadius="1" 
                                BorderThickness="1">
                            <ContentPresenter HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" 
                                        Value="{StaticResource LineButtonHoverBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" 
                                        Value="{StaticResource LineButtonPressedBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="ButtonBorder" Property="Background" 
                                        Value="{StaticResource LineButtonDisabledBrush}" />
                                <Setter TargetName="ButtonBorder" Property="Opacity" 
                                        Value="0.4"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- 
         The style for the MenuItem that represents the clickable portion
         for opening the sub-menu that itself will contain the list of
         TabItems.         
        -->
        <Style x:Key="TabMenuButtonStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Height" Value="{StaticResource ButtonWidthAndHeight}"/>
            <Setter Property="Width" Value="{StaticResource ButtonWidthAndHeight}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="ButtonBorder" Margin="1" 
                                BorderBrush="{StaticResource LineButtonBorderBrush}" 
                                Background="{StaticResource LineButtonBackgroundBrush}" 
                                CornerRadius="1" 
                                BorderThickness="1">
                            <Grid>
                                <ContentPresenter ContentSource="Header" 
                                                  Content="{StaticResource TabMenuButtonPath}"
                                                  HorizontalAlignment="Stretch"
                                                  VerticalAlignment="Stretch"/>
                                <Popup x:Name="Popup"
                                       Placement="Bottom"
                                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                                       AllowsTransparency="True" 
                                       Focusable="False"
                                       PopupAnimation="Fade">
                                    <!-- 
                                      Since we override the ControlTemplate, we're also responsible
                                      for drawing stuff like the shadow around the popup-menu.
                              
                                      Here, I'll use a Chrome that's provided in the Aero assembly. 
                                      Note that, in order to use this (that is, the namespace defined
                                      at the very top of this window), a reference to 
                                      PresentationFramework.Aero is required.
                                    -->
                                    <themes:SystemDropShadowChrome Color="#71000000" 
                                                       CornerRadius="1"
                                                       Margin="0,0,8,8"
                                                       SnapsToDevicePixels="True">
                                        <Border x:Name="SubmenuBorder"
                                                Margin="1"
                                                SnapsToDevicePixels="True"
                                                BorderBrush="{StaticResource LineButtonBorderBrush}" 
                                                Background="{StaticResource TabItemMenuBackcolor}" 
                                                CornerRadius="1" 
                                                BorderThickness="1">
                                            <StackPanel IsItemsHost="True" 
                                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Border>
                                    </themes:SystemDropShadowChrome>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter TargetName="ButtonBorder" Property="Background" 
                                        Value="{StaticResource LineButtonHoverBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="MenuItem_ForegroundBrush" Color="#333"/>
        <SolidColorBrush x:Key="MenuItem_DisabledForegroundBrush" Color="#AAA"/>
        <SolidColorBrush x:Key="MenuItem_DisabledBackgroundBrush" Color="#1555"/>

        <!-- The style for MenuItems that represent TabItems -->
        <Style x:Key="TabMenuItem" TargetType="{x:Type MenuItem}">
            <!-- 
            In order to not further pollute the sample with more
            ControlTemplates, I'll stick with simply overriding
            the HilightBrushKey for the hovered MenuItem.
            Poor man's Style. :-)
         -->
            <Style.Resources>
                <LinearGradientBrush    
                  x:Key="{x:Static SystemColors.HighlightBrushKey}"
                  StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="#FFFFD5A0" Offset="0.3"/>
                    <GradientStop Color="#FFEFA335" Offset="0.51"/>
                    <GradientStop Color="#FFFFC14A" Offset="0.986"/>
                </LinearGradientBrush>
            </Style.Resources>

            <!-- This will help us bind to the Header of a TabItem -->
            <Setter Property="Header" Value="{Binding Path=Header}" />
            <!-- 
            In order for MenuItems to support the IsEnabled state of a TabItem,
            we simply bind the IsEnabled property of the MenuItem to that of the
            TabItem.
            This way, a disabled TabItem will not be selectable via the Menu.
         -->
            <Setter Property="IsEnabled" Value="{Binding Path=IsEnabled}" />
            <!-- 
            By making the MenuItems checkable AND binding the IsChecked
            property to the IsSelected property of the TabItems, we'll 
            efficiently allow to pick the selected TabItem from the Menu
            with a simple two-way binding.
         -->
            <Setter Property="IsCheckable" Value="{Binding Path=IsEnabled}" />
            <Setter Property="IsChecked" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
            <Setter Property="Foreground" Value="{StaticResource MenuItem_ForegroundBrush}"/>
            <Style.Triggers>
                <Trigger Property="IsHighlighted" Value="True">
                    <Setter Property="Foreground"
                            Value="{StaticResource TabItem_TextBrush_Selected}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" 
                            Value="{StaticResource MenuItem_DisabledForegroundBrush}"/>
                    <Setter Property="Background"
                            Value="{StaticResource MenuItem_DisabledBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="TabButtonClose" TargetType="Button">
            <Setter Property="SnapsToDevicePixels" Value="false"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="Border"
                                BorderThickness="1"
                                CornerRadius="2"
                                BorderBrush="LightGray">
                            <Grid Background="Transparent">
                                <Path x:Name="CrossPath"
                                      Data="M0,0 L8,8 M8,0 L0,8"
                                      StrokeThickness="3"
                                      StrokeStartLineCap="Round"
                                      StrokeEndLineCap="Round"
                                      Margin="2"
                                      Stretch="Uniform"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="Stretch">
                                </Path>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="CrossPath" Property="Stroke" Value="Red"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="LightGray"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="false">
                                <Setter TargetName="CrossPath" Property="Stroke" Value="LightGray"/>
                                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="CrossPath" Property="Margin" Value="2.5,2.5,1.5,1.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- The TabControl's Style. -->
        <Style TargetType="TabControl">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="BorderThickness" Value="1,0,1,1"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabControl">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!--
                            The Border around each TabItem will allow us to draw the line
                            between the TabItemPanel and the TabControl (resp. the
                            TabPage-container) when a TabItem is NOT selected, which
                            replaces the bottom line of the TabItemPanel's border.
                            Thus, we'll avoid drawing the bottom line for the selected
                            TabItem. Also, since the TabItem, when selected, applies a left
                            Margin of 4px, we need to add these here as Padding.
                            -->
                            <Border x:Name="TabPanelBorder"
                                    Height="35"
                                    Background="{StaticResource TabPanel_BackgroundBrush}">
                                <!-- This is the area in which TabItems (the strips) will be drawn. -->
                                <ScrollViewer SnapsToDevicePixels="True"
                                              x:Name="svTP"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Disabled">
                                    <ScrollViewer.Style>
                                        <Style TargetType="ScrollViewer">
                                            <Setter Property="Focusable" Value="False"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Grid SnapsToDevicePixels="True">
                                                            <Grid.ColumnDefinitions>
                                                                <!--
                                                                  The TabItems (resp. the TabPanel)
                                                                  will appear here
                                                                -->
                                                                <ColumnDefinition Width="*"/>
                                                                <!--
                                                                  The following two columns will host
                                                                  the Scrollbuttons
                                                                -->
                                                                <ColumnDefinition Width="Auto"/>
                                                            </Grid.ColumnDefinitions>
                                                            <ScrollContentPresenter VirtualizingStackPanel.IsVirtualizing="False"
                                                                                    SnapsToDevicePixels="True"
                                                                                    Grid.Column="0"
                                                                                    Content="{TemplateBinding ScrollViewer.Content}"/>
                                                            <Grid HorizontalAlignment="Right"
                                                                    Grid.Column="1">
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="*"/>
                                                                    <RowDefinition Height="Auto"/>
                                                                </Grid.RowDefinitions>
                                                                <StackPanel Grid.Row="1"
                                                                             Orientation="Horizontal"
                                                                             Margin="{StaticResource TabPanelScrollPanel_Margin}">
                                                                    <!--
                                                                        The two RepeatButtons below will actually provide
                                                                        the scroll-functionality for the TabItems.
                                                                        Here, I'm utilizing the Page[Left/Right]Command;
                                                                        This could as well be using the
                                                                        Page[Left/Right]Command instead.
                                                                    -->
                                                                    <RepeatButton Style="{StaticResource LineButtonStyle}"
                                                                                  Command="ScrollBar.PageLeftCommand"
                                                                                  Content="{StaticResource ArrowLeftPath}"
                                                                                  IsEnabled="{Binding ElementName=svTP,
                                                                                  Path=HorizontalOffset,
                                                                                  Converter={StaticResource ScrollbarOnFarLeftConverter}}"/>
                                                                    <RepeatButton Style="{StaticResource LineButtonStyle}"
                                                                                  Command="ScrollBar.PageRightCommand"
                                                                                  Content="{StaticResource ArrowRightPath}">
                                                                        <RepeatButton.IsEnabled>
                                                                            <MultiBinding Converter="{StaticResource ScrollbarOnFarRightConverter}">
                                                                                <Binding ElementName="svTP"
                                                                                         Path="HorizontalOffset"/>
                                                                                <Binding ElementName="svTP"
                                                                                         Path="ViewportWidth"/>
                                                                                <Binding ElementName="svTP"
                                                                                         Path="ExtentWidth"/>
                                                                            </MultiBinding>
                                                                        </RepeatButton.IsEnabled>
                                                                    </RepeatButton>
                                                                    <!-- 
                                                                      This will present another "button" which
                                                                      will open up the Menu containing all TabItems, 
                                                                      with the selected one being checked.
                                                                      Clicking an item here will select the respective
                                                                      TabItem.
                                                                    -->
                                                                    <Menu Background="Transparent">
                                                                        <MenuItem Style="{StaticResource TabMenuButtonStyle}"
                                                                                  ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, 
                                                                                                        AncestorType={x:Type TabControl}}, 
                                                                                                        Path=Items}"
                                                                                  ItemContainerStyle="{StaticResource TabMenuItem}">
                                                                        </MenuItem>
                                                                    </Menu>
                                                                </StackPanel>
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <DataTrigger Value="false">
                                                                <DataTrigger.Binding>
                                                                    <MultiBinding Converter="{StaticResource ScrollbarOnFarRightConverter}">
                                                                        <Binding ElementName="svTP"
                                                                                 Path="HorizontalOffset"/>
                                                                        <Binding ElementName="svTP"
                                                                                 Path="ViewportWidth"/>
                                                                        <Binding ElementName="svTP"
                                                                                 Path="ExtentWidth"/>
                                                                    </MultiBinding>
                                                                </DataTrigger.Binding>
                                                            </DataTrigger>
                                                        </ControlTemplate.Triggers>

                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ScrollViewer.Style>
                                    <StackPanel x:Name="TabPanel"
                                                Orientation="Horizontal"
                                                IsItemsHost="true"
                                                Margin="{StaticResource TabPanel_Padding}"
                                                KeyboardNavigation.TabIndex="1"/>
                                </ScrollViewer>
                            </Border>
                            <!--
                            This is the outer border of the TabControl itself, actually meaning
                            the Panel that will host a TabItem's content.
                            The top-border here will not be drawn as, otherwise, the TabItemPanel
                            would always show a thin line for the selected Tab (which we want
                            to avoid).
                            -->
                            <Border BorderThickness="1,0,1,1"
                                    Grid.Row="1"
                                    BorderBrush="{StaticResource TabItem_BorderBrush_Selected}"
                                    Background="{StaticResource TabControl_BackgroundBrush_Base}">
                                <ContentPresenter ContentSource="SelectedContent" Margin="0"/>
                            </Border>

                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- The Style for TabItems (strips). -->
        <Style x:Key="TabItemStyle" TargetType="TabItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <!-- The Grid helps defining the general height of TabItems. -->
                        <Grid Height="30" VerticalAlignment="Bottom">
                            
                            <Border x:Name="Border"
                                    Background="{StaticResource TabItem_BackgroundBrush_Unselected}"
                                    BorderBrush="{StaticResource TabItem_BorderBrush_Selected}"
                                    Margin="{StaticResource TabItemMargin_Base}"
                                    BorderThickness="1,1,1,0"
                                    CornerRadius="2.5,2.5,0,0">
                                <Grid>
                                    <!-- This is where the Content of the TabItem will be rendered. -->
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="ContentSite"
                                                      Grid.Column="0"
                                                      VerticalAlignment="Stretch"
                                                      HorizontalAlignment="Stretch"
                                                      ContentSource="Header"
                                                      Margin="{StaticResource TabItemContentMargin_base}"
                                                      RecognizesAccessKey="True"/>
                                    <Button x:Name="BtnClose"
                                            Grid.Column="1"
                                            Style="{StaticResource ResourceKey=TabButtonClose}"
                                            Margin="-7,5,7,5"
                                            Visibility="Visible"
                                            Command="Close"
                                            ToolTip="Close"/>
                                </Grid>
                            </Border>
                            </Grid>
                        <ControlTemplate.Triggers>
                            <!-- The appearance of a TabItem when it's inactive/unselected -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Border.IsMouseOver" Value="False"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="90" />
                                <Setter TargetName="Border" Property="Background" 
                                        Value="{StaticResource TabItem_BackgroundBrush_Unselected}" />
                                <Setter TargetName="Border" Property="BorderBrush"
                                        Value="{StaticResource TabItem_Border_Unselected}" />
                                <Setter Property="Foreground"
                                        Value="{StaticResource TabItem_TextBrush_Unselected}" />
                                <!-- Except for the selected TabItem, tabs are to appear smaller in height. -->
                                <Setter TargetName="Border" Property="Margin"
                                        Value="{StaticResource TabItemMargin_Base}"/>
                                <Setter TargetName="BtnClose" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="BtnClose" Property="Margin"
                                        Value="{StaticResource ButtonMargin_Base}" />
                                <Setter TargetName="ContentSite" Property="Margin"
                                        Value="{StaticResource TabItemContentMargin_base}" />
                            </MultiTrigger>

                            <!--
                            The appearance of a TabItem when it's disabled
                            (in addition to Selected=False)
                            -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Panel.ZIndex" Value="80" />
                                <Setter TargetName="Border" Property="BorderBrush"
                                        Value="{StaticResource TabItem_DisabledBorderBrush}" />
                                <Setter TargetName="Border" Property="Background"
                                        Value="{StaticResource TabItem_BackgroundBrush_Disabled}" />
                                <Setter Property="Foreground"
                                        Value="{StaticResource TabItem_TextBrush_Disabled}" />
                                <Setter TargetName="Border" Property="Margin" 
                                        Value="{StaticResource TabItemMargin_Base}"/>
                            </Trigger>

                            <!-- The appearance of a TabItem when the mouse hovers over it -->
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Border.IsMouseOver" Value="True"/>
                                    <Condition Property="IsSelected" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Panel.ZIndex" Value="99" />
                                <Setter Property="Foreground"
                                        Value="{StaticResource TabItem_TextBrush_Hover}" />
                                <Setter TargetName="Border" Property="BorderBrush"
                                        Value="{StaticResource TabItem_HoverBorderBrush}" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,1" />
                                <Setter TargetName="Border" Property="Background"
                                        Value="{StaticResource TabItem_HoverBackgroundBrush}"/>
                                <!--
                                To further increase the hover-effect, extend the TabItem's height a little
                                more compared to unselected TabItems.
                                -->
                                <Setter TargetName="Border" Property="Margin"
                                        Value="{StaticResource TabItemMargin_Hover}"/>
                                <Setter TargetName="BtnClose" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="BtnClose" Property="Margin"
                                        Value="{StaticResource ButtonMargin_Hover}" />
                                <Setter TargetName="ContentSite" Property="Margin"
                                        Value="{StaticResource TabItemContentMargin_Hover}" />
                            </MultiTrigger>

                            <!-- The appearance of a TabItem when it's active/selected -->
                            <Trigger Property="IsSelected" Value="True">
                                <!-- We want the selected TabItem to always be on top. -->
                                <Setter Property="Panel.ZIndex" Value="100" />
                                <Setter TargetName="Border" Property="BorderBrush"
                                        Value="{StaticResource TabItem_BorderBrush_Selected}" />
                                <Setter TargetName="Border" Property="Background"
                                        Value="{StaticResource TabItem_BackgroundBrush_Selected}" />
                                <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                <Setter Property="Foreground"
                                        Value="{StaticResource TabItem_TextBrush_Selected}"/>
                                <Setter TargetName="Border" Property="Margin"
                                        Value="{StaticResource TabItemMargin_Selected}"/>
                                <Setter TargetName="BtnClose" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="BtnClose" Property="Margin"
                                        Value="{StaticResource ButtonMargin_Selected}" />
                                <Setter TargetName="ContentSite" Property="Margin"
                                        Value="{StaticResource TabItemContentMargin_Selected}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <ResourceDictionary x:Key="MetroStyle">
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/Metro/Metro.MSControls.Core.Implicit.xaml" />
                <ResourceDictionary Source="Themes/Metro/Metro.MSControls.Toolkit.Implicit.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
